name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: supplifit
        ports:
          - 5432:5432

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      # Instalar dependências do backend
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      # Executar testes do backend
      - name: Run backend tests
        run: |
          python manage.py test

      # Configurar Node.js para o frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Instalar dependências do frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      # Executar testes do frontend
      - name: Run frontend tests
        run: |
          cd frontend
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construir e publicar imagens Docker
      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

      # Implantar no servidor (exemplo com SSH)
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/project
            docker-compose pull
            docker-compose up -d